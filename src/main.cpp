#include <tgbot/tgbot.h>
#include <spdlog/spdlog.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/sinks/daily_file_sink.h>
#include <nlohmann/json.hpp>
#include "birthday_manager.h"
#include <sstream>
#include <regex>
#include <iostream>
#include <chrono>
#include <thread>
#include <queue>
#include <mutex>
#include <condition_variable>
#include <unordered_map>
#include <limits>

using namespace TgBot;
using namespace std;

class BirthdayBot {
private:
    Bot bot_;
    BirthdayManager birthday_manager_;
    shared_ptr<spdlog::logger> logger_;

    // –û—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏). –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä —Å–æ–±–ª—é–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ per-chat
    struct PendingMessage { int64_t chatId; string text; };
    mutex queueMutex_;
    condition_variable queueCv_;
    deque<PendingMessage> messageQueue_;
    unordered_map<int64_t, chrono::steady_clock::time_point> chatNextAllowed_;
    chrono::seconds baseDelay_{4};
    thread worker_;
    atomic<bool> stopWorker_{false};

    void startSenderWorker() {
        stopWorker_ = false;
        worker_ = thread([this]() {
            while (!stopWorker_) {
                PendingMessage msg;
                {
                    unique_lock<mutex> lock(queueMutex_);
                    queueCv_.wait(lock, [this]{ return stopWorker_ || !messageQueue_.empty(); });
                    if (stopWorker_) break;
                    msg = messageQueue_.front();
                    messageQueue_.pop_front();
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º per-chat –æ–∫–Ω–æ
                auto now = chrono::steady_clock::now();
                auto it = chatNextAllowed_.find(msg.chatId);
                if (it != chatNextAllowed_.end() && it->second > now) {
                    // –ï—â–µ —Ä–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: –≤–µ—Ä–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –∏ –ø–æ–¥–æ–∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã
                    {
                        lock_guard<mutex> lock(queueMutex_);
                        messageQueue_.push_back(msg);
                    }
                    this_thread::sleep_for(chrono::milliseconds(100));
                    continue;
                }

                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                try {
                    bot_.getApi().sendMessage(msg.chatId, msg.text);
                    this_thread::sleep_for(baseDelay_);
                    logger_->debug("Message sent to chat {}: {}", msg.chatId, msg.text.substr(0, 50) + "...");
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —á–∞—Ç–∞
                    chatNextAllowed_[msg.chatId] = chrono::steady_clock::now() + baseDelay_;
                } catch (const TgException& e) {
                    const string errorMsg = e.what();
                    logger_->error("Failed to send message to chat {}: {}", msg.chatId, errorMsg);
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 429: –∏–∑–≤–ª–µ–∫–∞–µ–º retry after –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä
                    if (errorMsg.find("Too Many Requests") != string::npos) {
                        size_t pos = errorMsg.find("retry after ");
                        int waitSec = 60; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if (pos != string::npos) {
                            try {
                                waitSec = stoi(errorMsg.substr(pos + 12));
                            } catch (...) {
                                waitSec = 60;
                            }
                        }
                        logger_->warn("Rate limited for chat {}. Waiting {}s before retry.", msg.chatId, waitSec);
                        chatNextAllowed_[msg.chatId] = chrono::steady_clock::now() + chrono::seconds(waitSec + 1);
                        // –ü–µ—Ä–µ–æ—á–µ—Ä–µ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã
                        {
                            lock_guard<mutex> lock(queueMutex_);
                            messageQueue_.push_back(msg);
                        }
                        // –ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω, —á—Ç–æ–±—ã –Ω–µ –∫—Ä—É—Ç–∏—Ç—å—Å—è –≤ —Ö–æ–ª–æ—Å—Ç—É—é
                        this_thread::sleep_for(chrono::milliseconds(100));
                    } else {
                        // –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏: –ª–µ–≥–∫–∏–π backoff –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                        chatNextAllowed_[msg.chatId] = chrono::steady_clock::now() + chrono::seconds(5);
                        {
                            lock_guard<mutex> lock(queueMutex_);
                            messageQueue_.push_back(msg);
                        }
                        this_thread::sleep_for(chrono::milliseconds(50));
                    }
                }
            }
        });
    }

    void stopSenderWorker() {
        stopWorker_ = true;
        queueCv_.notify_all();
        if (worker_.joinable()) worker_.join();
    }

    void enqueueMessage(int64_t chatId, const string& text) {
        {
            lock_guard<mutex> lock(queueMutex_);
            messageQueue_.push_back(PendingMessage{chatId, text});
        }
        queueCv_.notify_one();
    }

    void setupLogger() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏
        auto console_sink = make_shared<spdlog::sinks::stdout_color_sink_mt>();
        console_sink->set_level(spdlog::level::info);

        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
        auto file_sink = make_shared<spdlog::sinks::daily_file_sink_mt>("logs/birthday_bot.log", 2, 30);
        file_sink->set_level(spdlog::level::debug);

        // –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏-—Å–∏–Ω–∫ –ª–æ–≥–≥–µ—Ä
        vector<spdlog::sink_ptr> sinks {console_sink, file_sink};
        logger_ = make_shared<spdlog::logger>("birthday_bot", sinks.begin(), sinks.end());
        logger_->set_level(spdlog::level::debug);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger_->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [%^%l%$] [%t] %v");

        spdlog::register_logger(logger_);
        spdlog::set_default_logger(logger_);
    }

    void setupCommands() {
        // –ö–æ–º–∞–Ω–¥–∞ /dr N - –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        bot_.getEvents().onCommand("dr", [this](Message::Ptr message) {
            logger_->info("Received /dr command from user: {}", message->from->username);

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
            this_thread::sleep_for(chrono::milliseconds(500));

            string text = message->text;
            int days = 365; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 365 –¥–Ω–µ–π

            // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä N
            regex dr_regex(R"(/dr\s+(\d+))");
            smatch match;
            if (regex_search(text, match, dr_regex)) {
                days = stoi(match[1].str());
                if (days > 365) {
                    enqueueMessage(message->chat->id, "–û—à–∏–±–∫–∞: N –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 365 –¥–Ω–µ–π");
                    return;
                }
            }

            auto upcoming = birthday_manager_.getUpcomingBirthdays(days);

            if (upcoming.empty()) {
                enqueueMessage(message->chat->id,
                    "–í –±–ª–∏–∂–∞–π—à–∏–µ " + to_string(days) + " –¥–Ω–µ–π –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            stringstream response;
            response << "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ " << days << " –¥–Ω–µ–π:\n\n";

            for (const auto& [info, age] : upcoming) {
                // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                auto now = chrono::system_clock::now();
                auto time_t = chrono::system_clock::to_time_t(now);
                auto current_tm = *localtime(&time_t);

                int current_day = current_tm.tm_mday;
                int current_month = current_tm.tm_mon + 1;
                int current_year = current_tm.tm_year + 1900;

                int next_birthday_year = current_year;
                if (current_month > info.month || (current_month == info.month && current_day > info.day)) {
                    next_birthday_year++;
                }

                tm birthday_tm = {};
                birthday_tm.tm_year = next_birthday_year - 1900;
                birthday_tm.tm_mon = info.month - 1;
                birthday_tm.tm_mday = info.day;
                birthday_tm.tm_hour = 0;
                birthday_tm.tm_min = 0;
                birthday_tm.tm_sec = 0;

                auto birthday_time = mktime(&birthday_tm);
                auto current_time = mktime(&current_tm);

                int days_until = (birthday_time - current_time) / (24 * 60 * 60);
                if (days_until < 0) days_until = 0;

                response << "üë§ " << info.nickname << " - " << info.day << "." << info.month;
                if (days_until == 0) {
                    response << " (–°–ï–ì–û–î–ù–Ø!)";
                } else if (days_until == 1) {
                    response << " (–∑–∞–≤—Ç—Ä–∞)";
                } else {
                    response << " (—á–µ—Ä–µ–∑ " << days_until << " –¥–Ω–µ–π)";
                }
                response << " - –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è " << age << " –ª–µ—Ç\n";
            }

            enqueueMessage(message->chat->id, response.str());
        });

        // –ö–æ–º–∞–Ω–¥–∞ /add day.month.year - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        bot_.getEvents().onCommand("add", [this](Message::Ptr message) {
            logger_->info("Received /add command from user: {}", message->from->username);

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
            this_thread::sleep_for(chrono::milliseconds(500));

            string text = message->text;
            string username = message->from->username;

            if (username.empty()) {
                enqueueMessage(message->chat->id,
                    "–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è.");
                return;
            }

            // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É /add day.month.year
            regex add_regex(R"(/add\s+(\d{1,2})\.(\d{1,2})\.(\d{4}))");
            smatch match;

            if (regex_search(text, match, add_regex)) {
                int day = stoi(match[1].str());
                int month = stoi(match[2].str());
                int year = stoi(match[3].str());

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || year > 2024) {
                    enqueueMessage(message->chat->id,
                        "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add 15.03.1990)");
                    return;
                }

                birthday_manager_.addBirthday(username, day, month, year);
                enqueueMessage(message->chat->id,
                    "‚úÖ –í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è " + to_string(day) + "." + to_string(month) + "." + to_string(year) + " —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");

                logger_->info("Added birthday for user {}: {}.{}.{}", username, day, month, year);
            } else {
                // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É /add nickname day.month.year
                regex add_nickname_regex(R"(/add\s+(\w+)\s+(\d{1,2})\.(\d{1,2})\.(\d{4}))");
                if (regex_search(text, match, add_nickname_regex)) {
                    string nickname = match[1].str();
                    int day = stoi(match[2].str());
                    int month = stoi(match[3].str());
                    int year = stoi(match[4].str());

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || year > 2024) {
                        enqueueMessage(message->chat->id,
                            "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add –Ω–∏–∫–Ω–µ–π–º –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add john 15.03.1990)");
                        return;
                    }

                    birthday_manager_.addBirthday(nickname, day, month, year);
                    enqueueMessage(message->chat->id,
                        "‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + nickname + " (" + to_string(day) + "." + to_string(month) + "." + to_string(year) + ") —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");

                    logger_->info("Added birthday for user {} by {}: {}.{}.{}", nickname, username, day, month, year);
                } else {
                    enqueueMessage(message->chat->id,
                        "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "‚Ä¢ /add –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                        "‚Ä¢ /add –Ω–∏–∫–Ω–µ–π–º –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                        "–ü—Ä–∏–º–µ—Ä—ã:\n"
                        "‚Ä¢ /add 15.03.1990\n"
                        "‚Ä¢ /add john 25.12.1985");
                }
            }
        });

        // // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        // bot_.getEvents().onAnyMessage([this](Message::Ptr message) {
        //     if (message->text.empty()) return;

        //     if (message->text[0] == '/') {
        //         logger_->warn("Unknown command from user {}: {}", message->from->username, message->text);
        //         enqueueMessage(message->chat->id,
        //             "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        //             "‚Ä¢ /dr [N] - –ø–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 365)\n"
        //             "‚Ä¢ /add –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        //             "‚Ä¢ /add –Ω–∏–∫–Ω–µ–π–º –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥ - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        //     }
        // });
    }

public:
    BirthdayBot(const string& token) : bot_(token), birthday_manager_("birthdays.json") {
        setupLogger();
        setupCommands();
    }

    void run() {
        logger_->info("Starting Birthday Bot...");

        try {
            logger_->info("Bot username: {}", bot_.getApi().getMe()->username);
            logger_->info("Bot started successfully");
            // –û—á–∏—Å—Ç–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ø—Ä–æ–ø—É—Å—Ç–∏–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try {
                bot_.getApi().getUpdates(std::numeric_limits<int32_t>::max(), 0, 0, {});
                logger_->info("Skipped pending updates that arrived before startup");
            } catch (const TgException& e) {
                logger_->warn("Failed to skip pending updates: {}", e.what());
            }
            startSenderWorker();

            TgLongPoll longPoll(bot_);
            while (true) {
                try {
                    longPoll.start();
                } catch (const TgException& e) {
                    logger_->error("LongPoll error: {}", e.what());
                    logger_->info("Waiting 5 seconds before retry...");
                    this_thread::sleep_for(chrono::seconds(5));
                }
            }
        } catch (const TgException& e) {
            logger_->error("Telegram error: {}", e.what());
        } catch (const exception& e) {
            logger_->error("General error: {}", e.what());
        }
        stopSenderWorker();
    }
};

int main() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const char* token = getenv("BOT_TOKEN");
    if (!token) {
        cerr << "–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN" << endl;
        cerr << "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: export BOT_TOKEN=your_bot_token_here" << endl;
        return 1;
    }

    BirthdayBot bot(token);
    bot.run();

    return 0;
}
